generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String?
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  
  // League relations
  adminLeagues  League[]       @relation("LeagueAdmin")
  teams         Team[]
  leagueMembers LeagueMember[]
  botMatches    BotMatch[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int      // 1 = Superliga, 2 = 1. Division, 3 = 2. Division
  maxTeams    Int      @default(12)
  status      LeagueStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  admin       User     @relation("LeagueAdmin", fields: [adminId], references: [id])
  adminId     String
  teams       Team[]
  leagueMembers LeagueMember[]
  matches     Match[]
  seasons     Season[]
}

model Team {
  id            String   @id @default(cuid())
  name          String
  formation     String   @default("4-4-2") // Default formation: 4-4-2, 4-3-3, 3-5-2, 5-3-2
  colors        String?  // JSON string for primary and secondary colors
  logo          String?  // Logo identifier
  budget        Int      @default(10000000) // Starting budget in øre
  overallRating Int      @default(0) // Team overall rating
  captainId     String?  @unique // Captain player ID
  isBot         Boolean  @default(false) // True for bot teams
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
  league    League?  @relation(fields: [leagueId], references: [id])
  leagueId  String?
  rookieLeague RookieLeague? @relation(fields: [rookieLeagueId], references: [id])
  rookieLeagueId String?
  captain   Player?  @relation("TeamCaptain", fields: [captainId], references: [id])
  
  // Game related
  players   TeamPlayer[]
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
  botMatches BotMatch[]
  
  // Transfer related
  transfersFrom Transfer[] @relation("TransferFrom")
  transfersTo   Transfer[] @relation("TransferTo")
  
  // Season related
  seasonStats SeasonStats[]
  
  // Stadium related
  stadium Stadium?
}

model LeagueMember {
  id        String   @id @default(cuid())
  role      LeagueRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  
  @@unique([userId, leagueId])
}

model Club {
  id          String   @id @default(cuid())
  externalId  Int      @unique // API-Football team ID
  name        String
  logo        String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  players     Player[]
}

model Player {
  id          String   @id @default(cuid())
  externalId  Int?     @unique // API-Football player ID (optional for generated players)
  name        String
  age         Int
  number      Int?
  position    PlayerPosition
  photo       String?
  
  // Player stats (1-100 scale)
  speed       Int      @default(50)
  shooting   Int      @default(50)
  passing    Int      @default(50)
  defending  Int      @default(50)
  stamina    Int      @default(50)
  reflexes   Int      @default(50)
  
  // Market value in øre
  marketValue Int      @default(1000000)
  
  // Player status
  isGenerated Boolean  @default(false) // True for AI-generated players
  isCaptain   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  club        Club?    @relation(fields: [clubId], references: [id])
  clubId      String?
  teamPlayers TeamPlayer[]
  captainOf   Team?    @relation("TeamCaptain")
  transfers   Transfer[]
}

model TeamPlayer {
  id        String   @id @default(cuid())
  position  String   // Field position (GK, DEF, MID, FWD)
  isStarter Boolean  @default(false)
  formationPosition String? // Specific position in formation (e.g., "GK", "LB", "CB", "RB", "LM", "CM", "RM", "LW", "ST", "RW")
  createdAt DateTime @default(now())
  
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  
  @@unique([teamId, playerId]) // En spiller kan kun være på ét hold ad gangen
}

model RookieLeague {
  id          String   @id @default(cuid())
  name        String   @default("Rookie League")
  description String   @default("League for new players")
  maxTeams    Int      @default(50)
  status      LeagueStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teams       Team[]
  matches     Match[]
}

model Match {
  id          String   @id @default(cuid())
  homeScore   Int      @default(0)
  awayScore   Int      @default(0)
  status      MatchStatus @default(SCHEDULED)
  matchDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  league      League?  @relation(fields: [leagueId], references: [id])
  leagueId    String?
  rookieLeague RookieLeague? @relation(fields: [rookieLeagueId], references: [id])
  rookieLeagueId String?
  season      Season?  @relation(fields: [seasonId], references: [id])
  seasonId    String?
  homeTeam    Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId  String
  awayTeam    Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId  String
}

enum LeagueStatus {
  SIGNUP
  DRAFT_READY
  DRAFT_IN_PROGRESS
  ACTIVE
  COMPLETED
  PAUSED
}

enum LeagueRole {
  ADMIN
  MEMBER
}

enum PlayerPosition {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  ATTACKER
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model BotMatch {
  id            String      @id @default(cuid())
  ownerId       String
  userTeamId    String
  botDifficulty String      // Easy, Medium, Hard, Expert
  botRating     Int         // 65, 75, 85, 95
  userScore     Int?        @default(0)
  botScore      Int?        @default(0)
  status        MatchStatus @default(SCHEDULED)
  events        String?     // JSON string of match events
  highlights    String?     // JSON string of match highlights
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  owner     User @relation(fields: [ownerId], references: [id])
  userTeam  Team @relation(fields: [userTeamId], references: [id])
  highlightsClips MatchHighlight[] @relation("BotMatchHighlights")
}

model Transfer {
  id          String        @id @default(cuid())
  playerId    String
  fromTeamId  String?       // null for free agents
  toTeamId    String?       // null for selling to market
  askingPrice Int           // Price in øre
  status      TransferStatus @default(LISTED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  completedAt DateTime?
  
  // Relations
  player   Player @relation(fields: [playerId], references: [id])
  fromTeam Team?  @relation("TransferFrom", fields: [fromTeamId], references: [id])
  toTeam   Team?  @relation("TransferTo", fields: [toTeamId], references: [id])
}

enum TransferStatus {
  LISTED      // Available for transfer
  PENDING     // Transfer in progress
  COMPLETED   // Transfer completed
  CANCELLED   // Transfer cancelled
}

model Season {
  id          String   @id @default(cuid())
  year        Int
  status      SeasonStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  leagueId    String
  matches     Match[]
  seasonStats SeasonStats[]
}

model SeasonStats {
  id        String   @id @default(cuid())
  points    Int      @default(0)
  played    Int      @default(0)
  won       Int      @default(0)
  drawn     Int      @default(0)
  lost      Int      @default(0)
  goalsFor  Int      @default(0)
  goalsAgainst Int   @default(0)
  goalDiff  Int      @default(0)
  position  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  season    Season   @relation(fields: [seasonId], references: [id])
  seasonId  String
  
  @@unique([teamId, seasonId])
}

enum SeasonStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model MatchHighlight {
  id          String   @id @default(cuid())
  matchId     String
  eventType   String   // 'goal', 'save', 'shot', 'card', 'substitution'
  minute      Int
  player      String
  description String
  videoUrl    String?  // URL to video clip (simulated)
  thumbnailUrl String? // URL to thumbnail image
  duration    Int      @default(10) // Duration in seconds
  isProOnly   Boolean  @default(true) // PRO feature
  createdAt   DateTime @default(now())
  
  // Relations
  botMatch    BotMatch @relation("BotMatchHighlights", fields: [matchId], references: [id], onDelete: Cascade)
  
  @@index([matchId])
}

// Stadium Models
model Stadium {
  id              String   @id @default(cuid())
  name            String
  capacity        Int      @default(20000) // Total capacity
  tier            Int      @default(1) // Stadium tier (1-5)
  atmosphere      Int      @default(50) // Atmosphere rating (1-100)
  maintenanceCost Int      @default(100000) // Monthly maintenance cost in øre
  monthlyRevenue  Int      @default(500000) // Monthly revenue in øre
  homeAdvantage   Float    @default(0.05) // Home advantage bonus (0.0-0.2)
  prestige        Int      @default(50) // Stadium prestige (1-100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  team            Team     @relation(fields: [teamId], references: [id])
  teamId          String   @unique
  facilities      StadiumFacility[]
  upgrades        StadiumUpgrade[]
}

model StadiumFacility {
  id          String   @id @default(cuid())
  name        String
  type        FacilityType
  level       Int      @default(1) // Facility level (1-5)
  capacity    Int?     // For capacity-related facilities
  revenue     Int      @default(0) // Monthly revenue in øre
  cost        Int      @default(0) // Monthly cost in øre
  effect      String?  // JSON string for facility effects
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  stadium     Stadium  @relation(fields: [stadiumId], references: [id])
  stadiumId   String
}

model StadiumUpgrade {
  id          String   @id @default(cuid())
  name        String
  type        UpgradeType
  cost        Int      // Upgrade cost in øre
  duration    Int      @default(30) // Construction time in days
  status      UpgradeStatus @default(PLANNED)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  stadium     Stadium  @relation(fields: [stadiumId], references: [id])
  stadiumId   String
}

enum FacilityType {
  SEATING        // Seating capacity
  LED_SCREENS    // LED screens and displays
  SOUND_SYSTEM   // Sound and audio systems
  LIGHTING       // Stadium lighting
  PARKING        // Parking facilities
  TRANSPORT      // Public transport connections
  FAN_ZONE       // Pre-match fan areas
  MERCHANDISE    // Merchandise shops
  FOOD_BEVERAGE  // Food and beverage outlets
  VIP_LOUNGE     // VIP and premium areas
  WIFI           // WiFi coverage
  ACCESSIBILITY  // Accessibility features
  SECURITY       // Security systems
  MEDIA          // Media facilities
  SPONSOR        // Sponsor areas
}

enum UpgradeType {
  CAPACITY_EXPANSION  // Expand stadium capacity
  FACILITY_UPGRADE    // Upgrade existing facilities
  NEW_FACILITY        // Add new facility type
  RENOVATION          // General stadium renovation
  TECHNOLOGY          // Technology upgrades
  SUSTAINABILITY      // Green/sustainable upgrades
}

enum UpgradeStatus {
  PLANNED      // Upgrade planned but not started
  IN_PROGRESS  // Construction in progress
  COMPLETED    // Upgrade completed
  CANCELLED    // Upgrade cancelled
}


