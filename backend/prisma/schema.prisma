generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  
  // League relations
  adminLeagues  League[]       @relation("LeagueAdmin")
  teams         Team[]
  leagueMembers LeagueMember[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  maxTeams    Int      @default(8)
  status      LeagueStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  admin       User     @relation("LeagueAdmin", fields: [adminId], references: [id])
  adminId     String
  teams       Team[]
  leagueMembers LeagueMember[]
  matches     Match[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  formation String   @default("4-4-2") // Default formation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  
  // Game related
  players   TeamPlayer[]
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
}

model LeagueMember {
  id        String   @id @default(cuid())
  role      LeagueRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  
  @@unique([userId, leagueId])
}

model Club {
  id          String   @id @default(cuid())
  externalId  Int      @unique // API-Football team ID
  name        String
  logo        String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  players     Player[]
}

model Player {
  id          String   @id @default(cuid())
  externalId  Int      @unique // API-Football player ID
  name        String
  age         Int?
  number      Int?
  position    PlayerPosition
  photo       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  club        Club     @relation(fields: [clubId], references: [id])
  clubId      String
  teamPlayers TeamPlayer[]
}

model TeamPlayer {
  id        String   @id @default(cuid())
  position  String   // Field position (GK, DEF, MID, FWD)
  isStarter Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  
  @@unique([teamId, playerId]) // En spiller kan kun være på ét hold ad gangen
}

model Match {
  id          String   @id @default(cuid())
  homeScore   Int      @default(0)
  awayScore   Int      @default(0)
  status      MatchStatus @default(SCHEDULED)
  matchDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  leagueId    String
  homeTeam    Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId  String
  awayTeam    Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId  String
}

enum LeagueStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

enum LeagueRole {
  ADMIN
  MEMBER
}

enum PlayerPosition {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  ATTACKER
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


